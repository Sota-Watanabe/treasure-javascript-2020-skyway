{"version":3,"sources":["components/App.jsx","index.js"],"names":["peer","Peer","key","process","App","useState","myId","setMyId","callId","setCallId","localVideo","useRef","remoteVideo","on","id","current","navigator","mediaDevices","getUserMedia","video","audio","then","localStream","srcObject","mediaConnection","answer","stream","a","width","autoPlay","muted","playsInline","ref","value","onChange","e","target","onClick","call","play","catch","console","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAGMA,EAAO,I,OAAIC,GAAK,CAAEC,IAAKC,yCA8CdC,EA7CH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,OAEcF,mBAAS,IAFvB,mBAEPG,EAFO,KAECC,EAFD,KAGRC,EAAaC,iBAAO,MACpBC,EAAcD,iBAAO,MAC3BX,EAAKa,GAAG,QAAQ,WACdN,EAAQP,EAAKc,IACc,OAAvBJ,EAAWK,SACbC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAAQC,MAAK,SAAAC,GACrEZ,EAAWK,QAAQQ,UAAYD,QAKrCtB,EAAKa,GAAG,QAAQ,SAAAW,GACa,OAAvBd,EAAWK,UACbS,EAAgBC,OAAOf,EAAWK,QAAQQ,WAE1CC,EAAgBX,GAAG,SAAnB,uCAA6B,WAAMa,GAAN,SAAAC,EAAA,sDAC3Bf,EAAYG,QAAQQ,UAAYG,EADL,2CAA7B,2DAaJ,OACE,6BACE,4CACA,6BAAK,2BAAOE,MAAM,QAAQC,UAAQ,EAACC,OAAK,EAACC,aAAW,EAACC,IAAKtB,KAC1D,6BAAMJ,GACN,6BACE,2BAAO2B,MAAOzB,EAAQ0B,SAAU,SAAAC,GAAC,OAAI1B,EAAU0B,EAAEC,OAAOH,UACxD,4BAAQI,QAdG,WACSrC,EAAKsC,KAAK9B,EAAQE,EAAWK,QAAQQ,WAC7CV,GAAG,SAAnB,uCAA6B,WAAMa,GAAN,SAAAC,EAAA,6DAC3Bf,EAAYG,QAAQQ,UAAYG,EADL,SAErBd,EAAYG,QAAQwB,OAAOC,MAAMC,QAAQC,OAFpB,2CAA7B,yDAYI,iBAEF,6BAAK,2BAAOd,MAAM,QAAQC,UAAQ,EAACC,OAAK,EAACC,aAAW,EAACC,IAAKpB,OCxClE+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.75d9f949.chunk.js","sourcesContent":["import React from 'react'\nimport { useState, useRef } from 'react'\nimport Peer from 'skyway-js'\nconst peer = new Peer({ key: process.env.REACT_APP_SKYWAY_KEY })\nconst App = () => {\n    const [myId, setMyId] = useState('')\n    const [callId, setCallId] = useState('')\n    const localVideo = useRef(null)\n    const remoteVideo = useRef(null)\n    peer.on('open', () => {\n      setMyId(peer.id)\n      if (localVideo.current !== null) {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(localStream => {\n          localVideo.current.srcObject = localStream\n        })\n      }\n    })\n\n    peer.on('call', mediaConnection => {\n      if (localVideo.current !== null) {\n        mediaConnection.answer(localVideo.current.srcObject)\n\n        mediaConnection.on('stream', async stream => {\n          remoteVideo.current.srcObject = stream\n        })\n      }\n    })\n\n    const makeCall = () => {\n      const mediaConnection = peer.call(callId, localVideo.current.srcObject)\n      mediaConnection.on('stream', async stream => {\n        remoteVideo.current.srcObject = stream\n        await remoteVideo.current.play().catch(console.error)\n      })\n    }\n    return (\n      <div>\n        <div>skyway test</div>\n        <div><video width=\"400px\" autoPlay muted playsInline ref={localVideo}></video></div>\n        <div>{myId}</div>\n        <div>\n          <input value={callId} onChange={e => setCallId(e.target.value)}></input>\n          <button onClick={makeCall}>発信</button>\n        </div>\n        <div><video width=\"400px\" autoPlay muted playsInline ref={remoteVideo}></video></div>\n      </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}