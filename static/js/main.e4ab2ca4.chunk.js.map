{"version":3,"sources":["img/connect.png","components/VideoCall.jsx","components/TextCommunication.jsx","components/Editor.jsx","components/VideoChat.jsx","components/App.jsx","index.js"],"names":["module","exports","Peer","key","process","editorInstance","Editor","React","memo","props","console","log","text","className","editorProps","$blockScrolling","fontSize","height","highlightActiveLine","mode","name","onChange","editText","getValue","dataConnection","send","onLoad","newEditorInstance","showPrintMargin","tabSize","theme","value","width","wrapEnabed","peer","VideoChat","useState","myId","setMyId","callId","setCallId","setDataConnection","setEditText","localVideo","useRef","remoteVideo","on","id","current","navigator","mediaDevices","getUserMedia","video","audio","then","localStream","srcObject","receiveDataConnection","data","mediaConnection","answer","stream","a","style","display","autoPlay","muted","playsInline","ref","e","target","onClick","call","play","catch","error","connect","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4ab2ca4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/connect.e568bf9f.png\";","import React from 'react'\nimport { useState, useRef } from 'react'\nimport Peer from 'skyway-js'\nimport connectImage from '../img/connect.png'\n\nconst peer = new Peer({ key: process.env.REACT_APP_SKYWAY_KEY })\nconst VideoCall = () => {\n  console.log('start VideoCall---------: 0');\n\n  const [myId, setMyId] = useState('')\n  const [callId, setCallId] = useState('')\n  const localVideo = useRef(null)\n  const remoteVideo = useRef(null)\n\n  /* 初期接続時 */\n  peer.on('open', () => {\n    setMyId(peer.id)\n    // useEffectを使うべきかもしれない\n    if (localVideo.current !== null) {\n      console.log('get localStream');\n      navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(localStream => {\n        localVideo.current.srcObject = localStream\n      })\n    }\n  })\n\n  /* ビデオ電話要求を受信 */\n  peer.on('call', mediaConnection => {\n    // useEffectを使うべきかもしれない\n    if (localVideo.current !== null) {\n      mediaConnection.answer(localVideo.current.srcObject)\n\n      mediaConnection.on('stream', async stream => {\n        remoteVideo.current.srcObject = stream\n      })\n    }\n  })\n\n    const makeCall = () => {\n      console.log('make Call')\n      const mediaConnection = peer.call(callId, localVideo.current.srcObject)\n      mediaConnection.on('stream', async stream => {\n        remoteVideo.current.srcObject = stream\n        await remoteVideo.current.play().catch(console.error)\n      })\n    }\n  return (\n    <div style={{ display: \"flex\", height: \"400px\"}}>\n      {console.log('start return ')}\n      <div>\n        <video width=\"300px\" autoPlay muted playsInline ref={localVideo}></video>\n        <div>{myId}</div>\n        <input value={callId} onChange={e => setCallId(e.target.value)}></input>\n        <button onClick={makeCall}>発信</button>\n      </div>\n        {/* <img src={connectImage} alt=\"img of connectImage\" width=\"300px\"/> */}\n      <div>\n        <video width=\"300px\" autoPlay muted playsInline ref={remoteVideo}></video>\n      </div>\n    </div>\n    )\n}\n\nexport default VideoCall","import React from 'react'\nimport { useState } from 'react'\nimport Peer from 'skyway-js'\n\nconst peer = new Peer({ key: process.env.REACT_APP_SKYWAY_KEY })\nconst TextCommunication = () => {\n  const [myId, setMyId] = useState('')\n  const [conn, setConn] = useState('')\n  const [callId, setCallId] = useState('')\n  const [message, setMessage] = useState('')\n\n  // 最初だけ\n  peer.on('open', () => {\n    console.log('open')\n    setMyId(peer.id)\n  })\n\n  /* 接続要求を送信時 */\n  const makeConnect = () => {\n    console.log(\"makeConnect\")\n    const dataConnection = peer.connect(callId);\n    setConn(dataConnection) //Connいる?\n\n    dataConnection.on('data', data => {\n      console.log(data);\n    });\n\n  }\n\n  /* 接続要求を受信時 */\n  peer.on('connection', receiveDataConnection => {\n    console.log('peer.on conection')\n    const dataConnection = receiveDataConnection;\n    /* 初期接続時 */\n    console.log(\"setConn\");\n    setConn(dataConnection);\n\n    /* メッセージ受信 */\n    // setConn(dataConnection);\n    dataConnection.on('data', data => {\n      console.log(data);\n    });\n  })\n\n  /* メッセージを送信時 */\n  const send = () => {\n    console.log('send conn=', conn);\n    conn.send(message);\n  }\n\n  return (\n    <div style={{ display: \"flex\", height: \"400px\"}}>\n      {console.log('start return ')}\n      <div>\n        <div>{myId}</div>\n        <input onChange={e => setCallId(e.target.value)}></input>\n        <button onClick={makeConnect}>発信</button>\n        <input onChange={e => setMessage(e.target.value)}></input>\n        <button onClick={send}>メッセージ送信</button>\n\n      </div>\n    </div>\n    )\n}\n\nexport default TextCommunication","import 'ace-builds/src-noconflict/ace';\nimport 'ace-builds/src-noconflict/mode-c_cpp';\nimport 'ace-builds/src-noconflict/theme-chaos';\nimport React from 'react';\nimport AceEditor from 'react-ace';\n\nlet editorInstance = null;\nconst Editor = React.memo((props) => {\n  console.log('start Editor')\n  const text = props.text;\n  const onChange = () => {\n    const editText = editorInstance.getValue()\n\n    if (editText !== props.text){\n      /* 親コンポーネントのeditTextを更新 */\n      const {dataConnection} = props;\n      console.log(dataConnection)\n      dataConnection.send(editText)\n      console.log('not skipppppppppp')\n    } else {\n      console.log('skipppppppppppppp')\n    }\n\n  };\n  /* editorInstance作成後 */\n  const onLoad = (newEditorInstance) => {\n    editorInstance = newEditorInstance;\n  };\n\n  return (\n  <div className=\"bg-gray-900 flex-auto\">\n      <h2>Share Code</h2>\n      <AceEditor\n      editorProps={{ $blockScrolling: 'true' }}\n      fontSize=\"16px\"\n      height=\"500px\"\n      highlightActiveLine={false}\n      mode=\"c_cpp\"\n      name=\"UNIQUE_ID_OF_DIV\"\n      onChange={onChange}\n      onLoad={onLoad}\n      showPrintMargin={false}\n      tabSize={4}\n      theme=\"chaos\"\n      value={text}\n      width=\"100%\"\n      wrapEnabed={false}\n      />\n  </div>\n  );\n},\n// Props.editTextが変更されない限り, 再レンダリングしない\n  // (prevProps, nextProps) => prevProps.text === nextProps.text,\n);\n\n\nexport default Editor;\n","import React, { useRef, useState, useEffect } from 'react'\nimport Peer from 'skyway-js'\nimport Editor from './Editor'\n\nconst peer = new Peer({ key: process.env.REACT_APP_SKYWAY_KEY })\nconst VideoChat = () => {\n  console.log('start VideoChatーーーーーーーーー')\n  const [myId, setMyId] = useState('')\n  const [callId, setCallId] = useState('')\n  const [dataConnection, setDataConnection] = useState('')\n  const [editText, setEditText] = useState('')\n  const localVideo = useRef(null)\n  const remoteVideo = useRef(null)\n\n\n  // 最初だけ\n  peer.on('open', () => {\n    console.log('open')\n    setMyId(peer.id)\n    // useEffectを使うべきかもしれない\n    if (localVideo.current !== null) {\n      console.log('get localStream');\n      navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(localStream => {\n        localVideo.current.srcObject = localStream\n      })\n    }\n  })\n\n  /* 接続要求を送信 */\n  const makeConnection = () => {\n    console.log('make Call')\n    const mediaConnection = peer.call(callId, localVideo.current.srcObject)\n    mediaConnection.on('stream', async stream => {\n      remoteVideo.current.srcObject = stream\n      await remoteVideo.current.play().catch(console.error)\n    })\n    console.log(\"makeConnect\")\n    const dataConnection = peer.connect(callId);\n    setDataConnection(dataConnection) //Connいる?\n\n    dataConnection.on('data', data => {\n      console.log(data);\n      setEditText(data)\n    });\n  }\n\n\n  /* 接続要求を受信時 */\n  peer.on('connection', receiveDataConnection => {\n    console.log('peer.on conection')\n    /* 初期接続時 */\n    console.log(\"setConn\");\n    setDataConnection(receiveDataConnection);\n\n    /* メッセージ受信 */\n    receiveDataConnection.on('data', data => {\n      console.log(data);\n      setEditText(data)\n    });\n  })\n\n  /* ビデオ電話要求を受信 */\n  peer.on('call', mediaConnection => {\n    // useEffectを使うべきかもしれない\n    if (localVideo.current !== null) {\n      mediaConnection.answer(localVideo.current.srcObject)\n\n      mediaConnection.on('stream', async stream => {\n        remoteVideo.current.srcObject = stream\n      })\n    }\n  })\n\n  // //いるか?\n  // useEffect (() => {\n  //   if (dataConnection.open === true){\n  //     console.log('send')\n  //     dataConnection.send(editText);\n  //   }\n  // })\n\n  return (\n    <>\n      <div style={{ display: \"flex\", height: \"300px\"}}>\n        {console.log('start return ')}\n        {console.log(\"dataConnection:\", dataConnection)}\n        <div>\n          <video width=\"300px\" autoPlay muted playsInline ref={localVideo}></video>\n          <div>{myId}</div>\n          <input onChange={e => setCallId(e.target.value)}></input>\n          <button onClick={makeConnection}>発信</button>\n        </div>\n        <div>\n          <video width=\"300px\" autoPlay muted playsInline ref={remoteVideo}></video>\n        </div>\n      </div>\n      {/* <button onClick={send}>メッセージ送信</button> */}\n      <Editor text={editText} dataConnection={dataConnection}/>\n    </>\n  )\n}\n\nexport default VideoChat","import React from 'react'\nimport VideoCall from './VideoCall'\nimport TextCommunication from './TextCommunication'\nimport VideoChat from './VideoChat'\n\nconst App = () => {\n  console.log('start App')\n  return (\n    <div>\n      <VideoChat />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}